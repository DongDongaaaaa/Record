time： 2021-08-09
给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有和为 0 且不重复的三元组。

注意：答案中不可以包含重复的三元组。
输入：nums = [-1,0,1,2,-1,-4]
输出：[[-1,-1,2],[-1,0,1]]
#思路: 首先将数组排序，然后有一层for循环，i从下标为0的地方开始，同时定一个下标left 定义在i+1的位置上，定义下标right 在数组结尾的位置上，
如果 s = nums[i] + nums[i+1] + nums[right] <0 则 将left 向右一移一位，如果>0 就将right 向左移一位，
若 结果等于0，则记录当前的三个数，去除 重复的三个数，然后将left 和 right同时向中间收缩， 

class Solution(object):
    def threeSum(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        #思路: 首先将数组排序，然后有一层for循环，i从下标为0的地方开始，同时定一个下标left 定义在i+1的位置上，定义下标right 在数组结尾的位置上，如果 s = nums[i] + nums[i+1] + nums[right] <0 则 将left 向右一移一位，如果>0 就将right 向左移一位， 若 等于0，则记录当前的三个数，去除 重复的三个数，然后将left 和 right同时向中间收缩，
        nums = sorted(nums)
        ans = []
        for i in range(len(nums)):
            if nums[i] > 0: #如果当前数大于0，left 和 right也会大于0，和一定会大于0， i以后的数找不到满足题目要求的值，这种情况直接结束循环
                break
            if i >= 1 and nums[i] ==nums[i-1]: #如果当前的数在之前出现过，就跳过
                continue
                
            left = i+1
            right = len(nums)-1
            while left < right:
                if nums[i] + nums[left] + nums[right] <0:
                    left += 1
                elif nums[i] + nums[left] + nums[right] >0:
                    right -= 1
                else: #找到结果后先去重复值，再收缩左右
                    ans.append([nums[i],nums[left],nums[right]])
                    while left != right and nums[left]==nums[left+1]: # 去除和left一样的值
                        left +=1
                    while left != right and nums[right]==nums[right-1]: #去处和right一样的值
                        right-=1
                    left +=1
                    right -=1
        return ans
